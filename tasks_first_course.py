# - 1 - У Николая есть друг Джон, который живет в Америке. Николай увлекается старинными вещами,
#       поэтому Джон подарил ему градусник со шкалой Фаренгейта. Чтобы проверить точность градусника,
#       необходимо написать программу, которая используя формулу: C = (float(input() - 32) * (5/9)
#       переведет градусы Фаренгейта в градусы Цельсия.

# Решение 1:

# print(f'Температура = {(float(input("Введите температуру в фаренгейтах: ")) -32) *(5/9):.1f} градусов цельсия')


# Решение 2:
# def counting_degrees(degrees):
#
#     return f'Температура = {(degrees - 32) * (5/9):.1f} градусов цельсия'
#
#
# print(counting_degrees(degrees=float(input('Введите температуру в фаренгейтах: '))))


# - 2 - Светлана каждый месяц откладывала деньги на свой банковский счет, открытый в долларах.
#       Для поездки в Рим она решила узнать, сколько накопила денег в евро. К сожалению, Светлана знает только
#       курс для перевода:
#   - из долларов в рубли: 1 $ = 70,38 ₽
#   - из рублей в евро: 100 ₽ = 1,22 €
#       Составьте алгоритм, который при вводе суммы в долларах вначале переведет ее в рубли, затем —
#       в евро и выведет полученную сумму.*

# Решение 1:

# print(f'У Светланы будет: {((float(input("Введите сумму в долларах: ")) * 70.38) / 100) * 1.22:.1f} евро')


# Решение 2:

# def money_calculation(money_dollar, money_rub, money_euro):
#
#     return f'У Светланы на руках будет: {((money_dollar * money_rub) / 100) * money_euro:.1f} евро'
#
#
# print(money_calculation(money_dollar=float(input('Введите сумму в доллара $: ')), money_rub=70.38, money_euro=1.22))

# - 3 - Виктор живет в Санкт-Петербурге и каждый день перед работой смотрит прогноз погоды на день.
#       Если метеорологи обещают солнечный день, он берет с собой очки, если нет — зонт.
#
#       Составьте алгоритм, который спрашивает: «Какая сегодня погода?» Если ввести «Солнечная»,
#       выходит сообщение: «Возьми с собой очки», в противном случае — «Возьми с собой зонт». Перед
#       завершением работы выводит сообщение: «Хорошего дня!»*

# Решение 1:

# print('Возьми с собой очки\nХорошего дня !' if input("Какая сегодня погода ? ") == 'Солнечная'
#     else 'Возьми с собой зонт\nВсего хорошего!')


# Решение 2:

# def weather_watcher(weater):
#
#     return 'Возьми с собой очки.\nХорошего дня! ' if weater == 'Солнечная' else 'Возьми с собой зонт\nХорошего дня!'
#
#
# print(weather_watcher(weater=input('Какая сегодня погода ? ')))

# Решение 3:

# if input('Какая сегодня погода ?: ') == 'Солнечная':
#     print('Возьмите с собой очки')
# else:
#     print('Возьми с собой зонт')
# print('Хорошего дня!')


# - 4 - Для покупки велосипеда у Виктора не хватало денег, поэтому он решил откладывать понемногу в течении всего года.
#       Для того, чтобы подсчитать сколько средств он положил в копилку, Виктору необходимо написать программу,
#       которая каждый месяц запрашивает сумму, отложенную на покупку и в конце года выводит общий итог.
#
#       Опишите алгоритм, который ежемесячно запрашивает сумму, которую отложил пользователь в копилку и через 12
#       месяцев выводит общую сумму накопления.

# Решение 1:

# current_month, count_money = 1, 0
# while current_month < 13:
#     count_money += float(input(f'Какую сумму отложим в {current_month} месяце ? '))
#     current_month += 1
# print(f'Через год у Виктора будет {count_money} рублей')


# ------------------------------------------Не обязательные задачи----------------------------------------------------#

# - 1 - При выборе режима современная стиральная машина покажет длительность стирки на основе программы и настроек.

#       Обычный цикл стирки занимает 90 минут. Экспресс-стирка длится 20 минут. Стирка хлопка длится 120 минут.

#       Отключенный отжим сэкономит 10 минут. Дополнительное полоскание добавит 10 минут.

#       Зарисуйте алгоритм, который рассчитывает длительность стирки на основе 3 параметров:
#      - Выбранный режим.              - Отжим (вкл/выкл).         - Дополнительное полоскание (вкл/выкл).

# Решение : # -- Если отжим априори выключен он ведь не отнимает время от основного цикла ? Надеюсь что да =) --  #


# def laundry(main_mode, add_mode_1, add_mode_2, normal_cycle, express_wash, cotton_washing):
#     count_time = 0
#
#     if main_mode == normal_cycle and add_mode_1 == 'Да' and add_mode_2 == 'Да':
#         count_time += 110
#     elif main_mode == normal_cycle:
#         count_time += 100
#
#     if main_mode == express_wash and add_mode_1 == 'Да' and add_mode_2 == 'Да':
#         count_time += 40
#     elif main_mode == express_wash:
#         count_time += 30
#
#     if main_mode == cotton_washing and add_mode_1 == 'Да' and add_mode_2 == 'Да':
#         count_time += 140
#     elif main_mode == cotton_washing:
#         count_time += 130
#
#     return f'Время стирки: {count_time} минут'
#
#
# print(laundry(main_mode=input("Выберите основной режим стирки: "), add_mode_1=input("Включить отжим? "),
#               add_mode_2=input("Включить полоскание? "), normal_cycle='Нормальный режим',
#               express_wash='Экспресс стирка', cotton_washing='Стирка хлопка'))

# - 2 - Зарплата приходит 10-го и 25-го числа каждого месяца. Несложно посчитать, сколько дней до зарплаты,
#       если сегодня 5-е или 20-е число. А если 28-е, то сколько осталось дней? Напишите алгоритм,
#       который считает дни до зарплаты с учетом того, что в месяце всегда 30 дней.

# Решение 1:

# MONTH = 30
# payday_1 = 10
# payday_2 = 25
#
#
# def count_days(data):
#     if payday_1 < data < payday_2:
#         days_left = payday_2 - data
#     elif 0 < data < payday_1:
#         days_left = payday_1 - data
#     else:
#         days_left = MONTH - data + payday_1
#     return f'Сегодня {data} число, до ближайшей зарплаты - {days_left} дней(я).'
#
#
# print(count_days(data=int(input('Какая сегодня дата ? '))))

# - 3 - Кроме обязательной части, к зарплате (которая известна нам) полагается премия раз в квартал (три месяца).
#       Например, в этом году вы доставляли книги по программированию. Ваш план на квартал 1000 книг.
#       Если вы доставили от 1000 до 1500 книг, то получите 10% бонус. Если от 1500 до 2000 книг,
#       то бонус будет уже 15%. Если же вы доставили больше 2000 книг, то бонус будет целых 20%.
#       А что будет, если вы доставили меньше 1000? Тогда никакого бонуса.
#       Давайте зарисуем алгоритм, как вычисляется сумма бонуса (именно сумма, не процент).

# Решение:

# MY_SALARY = 1000
#
#
# def book_delivery(books):
#
#     if books < 1000:
#         salary_bonus = 0
#     elif 1000 < books < 1500:
#         salary_bonus = MY_SALARY * 0.10
#     elif 1500 < books < 2000:
#         salary_bonus = MY_SALARY * 0.15
#     else:
#         salary_bonus = MY_SALARY * 0.20
#
#     return f'В этом месяце ваш бонус: {salary_bonus} $, ' \
#            f'Итого зарплата {salary_bonus + MY_SALARY} $'
#
#
# print(book_delivery(books=int(input('Сколько книг вы даставили за этот месяц ? '))))

# - 4 - Окончания слов — классическая задача в программировании пользовательских интерфейсов.
#       Например, когда мы выводим количество питонов, то говорим:

#       1 питон
#       2 питона
#       5 питонов
#       11 питонов
#       21 питон
#       100 питонов

#       Зарисуйте алгоритм, который в зависимости от числа подбирает окончание и выводит слова, как на примерах выше.
#       Подсказка: вы можете использовать условия, деление, получать остаток от деления.

# pyton = int(input('Введите число: '))
#
# if pyton % 100 in [0, 10, 11, 12, 13, 14]:
#     print(f'{pyton} питонов')
#
# elif pyton % 10 in [2, 3, 4]:
#     print(f'{pyton} питона')
#
# elif pyton % 10 == 1:
#     print(f'{pyton} питон')
#
# else:
#     print(f'{pyton} питонов')

# Решение 2:

# python_count = int(input(': '))
#
# if 10 <= python_count % 100 <= 14:
#     morphy = 'питонов'
# elif python_count % 10 == 1:
#     morphy = 'питон'
# elif 2 <= python_count % 10 <= 4:
#     morphy = 'питона'
# else:
#     morphy = 'питонов'
# print(python_count, morphy)


# - 5 - Сперва программа здоровается и предлагает начать.

#      `Привет! Предлагаю проверить свои знания английского! Набери "ready", чтобы начать!`
#       Если пользователь набрал `ready` , на экране отображается первое задание. Если нет — повторяется приветствие.
#       В самой простой версии заданий всего три:

#   Задание 1: `My name ___ Vova`
#   Верный ответ: `is`

#   Задание 2: `I ___ a coder`
#   Верный ответ: `am`

#   Задание 3: `I live ___ Moscow`
#   Верный ответ: `in`

#       Если ответ правильный, приложение говорит: `Ответ верный!`
#       Если ответ неверный, приложение говорит: `Неправильно. Правильный ответ: ______`
#       Затем приложение показывает следующее задание.
#       После ответа на 3 вопроса приложение говорит:
#       `Вот и все! Вы ответили на ___ вопросов из 3 верно, это ____ процентов`.
#       Если пользователь набрал `ready` , на экране отображается первое задание. Если нет — повторяется приветствие.

# Решение:

# def main():
#     print('Привет! Предлагаю проверить свои знания английского! Набери "ready", чтобы начать!')
#     ready = input('Enter "ready": ')
#     count = 0
#
#     while ready == 'ready':
#         print('Задание 1: `My name ___ Vova`')
#         answer_1 = input('Введите ответ на 1 вопрос: ')
#         if answer_1 == 'is':
#             print('Ответ верный!')
#             count += 1
#             print()
#         elif answer_1 != 'is':
#             print('Неправильно, правильный ответ - "is"')
#             print()
#
#         print('Задание 2: I ___ a coder')
#         answer_2 = input('Введите ответ на 2 вопрос: ')
#         if answer_2 == 'am':
#             print('Ответ верный!')
#             count += 1
#             print()
#         elif answer_2 != 'is':
#             print('Неправильно, правильный ответ - "am"')
#             print()
#
#         print('Задание 3: I live ___ Moscow')
#         answer_3 = input('Введите ответ: ')
#         if answer_3 == 'in':
#             print('Ответ верный!')
#             count += 1
#             print()
#         elif answer_3 != 'in':
#             print('Неправильно, правильный ответ - "in"')
#             print()
#
#         if count == 1:
#             percentage_calculation = 100 * 0.33
#         elif count == 2:
#             percentage_calculation = 100 * 0.66
#         elif count == 3:
#             percentage_calculation = 100
#         else:
#             percentage_calculation = 0
#         print(f'Вот и все! Вы ответили на {count} вопросов из 3 верно, это {percentage_calculation} процентов')
#
#         if count < 4:
#             break
#     if ready != 'ready':
#         main()
#
#
# main()

# # Переменная будет считать количество очков за правильные ответы, изначально 0 - потому что
# #  очков будет всего 30 за 3 ответа. Если счетчик не 0 - баллов будет не 30.
# count_points = 0
# # Переменная будет считать правильные ответы пользователя. Так же как и счетчик баллов - 0.
# count_question = 0
# # Одновременно приветствие и запрос на ввод имени
# name = input('Привет! Предлагаю проверить свои знания английского! Расскажи, как тебя зовут!\n'
#              'Введите ваше имя: ')
# # Пользователь вводит имя и далее программа задаёт 1 вопрос:
# print(f'Привет, {name}, начинаем тренировку! ')
#
# # Разделитель - для удобства чтения
# print('-' * 35)
# # Вопрос - ответ " в одном флаконе "
# answer = input('1) Вопрос: My name ___ Vova\n'
#                'Введите ваш ответ здесь: ')
# # ЕСЛИ ответ верный:
# if answer == 'is':
#     # счетчик накопит в себя 10 баллов
#     count_points += 10
#     # счетчик накопит в себя + 1 верный ответ
#     count_question += 1
#     # Выводится данное сообщение
#     print('Ответ верный! Вы получаете 10 баллов!')
#     # Если ответ не верный:
# else:
#     # Выводится данное сообщение
#     print('Неправильно.\n'
#           'Верный ответ: is')
#
#
# # -----> К оставшимся двум вопросам применимы те же комментарии, что и к первому <------ #
# print('-' * 35)
# answer = input('2) Вопрос:I ___ a coder\n'
#                'Введите ваш ответ здесь: ')
# if answer == 'am':
#     count_points += 10
#     count_question += 1
#     print('Ответ верный! Вы получаете 10 баллов!')
# else:
#     print('Неправильно.\n'
#           'Верный ответ: am')
#
#
# print('-' * 35)
# answer = input('3) Вопрос: I live ___ Moscow\n'
#                'Введите ваш ответ здесь: ')  #
# if answer == 'in':
#     count_points += 10  #
#     count_question += 1  #
#     print('Ответ верный! Вы получаете 10 баллов!')
# else:
#     print('Неправильно.\n'
#           'Верный ответ: in')
#
# print(f'Вот и все {name}! Вы ответили на {count_question} вопросов из 3 верно.\n'
#       f'Вы заработали {count_points} баллов. Это {round(count_question / 3 * 100)} процентов')
# ######################################################################################


#####################################################################################################
# ----------------------> Урок 3. Строки и циклы. Домашнее задание < -------------------------- #
# Основная часть задачи.
# Два списка, questions - с вопросами, answers - с ответами
# questions = ['1) Вопрос - My name___Vova: ', '2) Вопрос - I___a coder: ', '3) Вопрос - I live___Moscow: ']
# answers = ['is', 'am', 'in']
# # счетчик вопросов
# count_questions = 0
# # greetings - переменная запускающая программу если вводится соответствующее значение
# greetings = input('Привет! Предлагаю проверить свои знания английского!\n'
#                   'Наберите "ready", чтобы начать!: ')
# # Данное условие инициализирует запуск программы
# if greetings == 'ready':
#     # Цикл по длине списка с ВОПРОСАМИ. Будет работать до тех пор, пока не дойдет до конца длины списка.
#     for i in range(len(answers)):
#         # Переменная answer - работает совместно с циклом for, куда в последствии в questions[i] передаются
#         # поочереди вопросы.
#         answer = input(f'{questions[i]}\n'
#                        f'Введите ответ: ')
#         # Если ответ введенный пользователем совпадает с ответом под [0] индексом списка вопросов, на который
#         # указывает answers[i], счетчик прибавляет + 1 к count_questions и выводит соответствующее сообщение
#         if answer == answers[i]:
#             count_questions += 1
#             # ---> end='\n' * 2 - это перенос строки, для удобства чтения.
#             print('Ответ верный!', end='\n' * 2)
#         # Если ответ не верный, выводится сообщение и указывается правильный ответ.
#         else:
#             print(f'Неправильно. Правильный ответ: {answers[i]}', end='\n' * 2)
#     # Расчеты:
#     # 1 - переменная count_questions счетчик вопросов
#     # 2 - len(questions) - длинна списка вопросов
#     # 3 - round(count_questions / len(questions) * 100) - рассчет процента верных ответов. Здесь мы делим
#     #     счетчик вопросов на длину списка вопросов, поэтому если число вопросов изменится, рассчеты всё равно
#     #     останутся верными.
#     print(f'Вот и все!\n'
#           f'Вы ответили на {count_questions} вопросов из {len(questions)} верно.\n'
#           f'Это {round(count_questions / len(questions) * 100)} процентов.')
# # если в переменную greetings вводится значение которое программа не ожидает, происходит выход из программы.
# else:
#     print('Кажется, вы не хотите играть. Очень жаль')
#####################################################################################################

#####################################################################################################
# ------------------------------------> Задание со звездочкой <---------------------------------- #
# questions = [('1) Вопрос - My name_?_Vova: ', 'is'),
#              ('2) Вопрос - I_?_a coder: ', 'am'),
#              ('3) Вопрос - I live_?_Moscow: ', 'in')]
# # счетчик верных ответов
# correct_count = 0
# # счетчик баллов
# pounts_count = 0
# greetings = input('Привет! Предлагаю проверить свои знания английского!\nНаберите "ready", чтобы начать: ')
# if greetings != 'r':
#     print('Кажется, вы не хотите играть. Очень жаль.')
# else:
#     # i - будет бегать по списку
#     for i in questions:
#         # это кол - во попыток
#         attempt_count = 3
#         while attempt_count > 0:
#             attempt = input(i[0])
#             # т.к. в каждом кортеже ответ == 1 то:
#             if attempt == i[1]:
#                 print(f'Ответ верный!')
#                 pounts_count += attempt_count
#                 correct_count += 1
#                 break
#             elif attempt_count > 1:
#                 attempt_count -= 1
#                 print(f'Осталось попыток: {attempt_count}, попробуйте еще раз!')
#             else:
#                 attempt_count -= 1
#                 print(f'Увы, но нет. Верный ответ: {i[1]}')
#
#     print(f'Вот и все!\n'
#           f'Вы ответили на {correct_count} вопросов.\n'
#           f'Из {len(questions)} верно. Вы набрали {pounts_count} баллов.')
#####################################################################################################
# решение функцией
# Функция для добавления слову окончания, согласующегося с числительным
# def ending(number):
#     n = abs(number)  # Поддержка отрицательных чисел для универсальности
#     mod = n % 10
#     if (11 <= (n % 100) <= 14) or mod > 4 or mod == 0:
#         return 'ов'
#     if mod == 1:
#         return ''
#     if 2 <= mod <= 4:
#         return 'а'
#
#
# # Список из пар '(вопрос, ответ)'
# questions = [
#     ('My name ___ Vova\n', 'is'),
#     ('I ___ a coder\n', 'am'),
#     ('I live ___ Moscow\n', 'in')
# ]
#
# # Инициализируем счётчики правильных ответов и баллов
# correct_count = 0
# points = 0
#
# # Создаём переменную с количеством вопросов для дальнейшего использования
# q_number = len(questions)
#
# if input('Привет! Предлагаю проверить свои знания английского!\n'
#          'Наберите "ready", чтобы начать!') != 'ready':
#     print('Кажется, вы не хотите играть. Очень жаль.')
# else:
#     for entry in questions:
#         attempts_left = 3
#         while attempts_left > 0:
#             attempt = input(entry[0])
#             if attempt == entry[1]:
#                 print(f'Ответ верный!')
#                 points += attempts_left
#                 correct_count += 1
#                 break
#             elif attempts_left > 1:
#                 attempts_left -= 1
#                 print(f'Осталось попыток: {attempts_left}, '
#                       'попробуйте еще раз!')
#             else:
#                 attempts_left -= 1
#                 print(f'Увы, но нет. Верный ответ: {entry[1]}')
#
#     print(f'Вот и все!\n'
#           f'Вы ответили на {correct_count} вопрос{ending(correct_count)} '
#           f'из {q_number} верно. Вы набрали {points} баллов.')
#####################################################################################################


#####################################################################################################
# -----------------------------> Урок 4. Строки и словари. Домашнее задание <------------------------ #
# words_easy = {
#     "family": "семья",
#     "hand": "рука",
#     "people": "люди",
#     "evening": "вечер",
#     "minute": "минута",
# }
#
# words_medium = {
#     "believe": "верить",
#     "feel": "чувствовать",
#     "make": "делать",
#     "open": "открывать",
#     "think": "думать",
# }
#
# words_hard = {
#     "rural": "деревенский",
#     "fortune": "удача",
#     "exercise": "упражнение",
#     "suggest": "предлагать",
#     "except": "кроме",
# }
#
# levels = {
#     0: "Нулевой",
#     1: "Так себе",
#     2: "Можно лучше",
#     3: "Норм",
#     4: "Хорошо",
#     5: "Отлично",
# }
# # Словарь с ответами
# answers = {}
# # Пустой словарь, в который будет загружен нужный, в зависимости от выбранного режима сложности.
# words = {}
# # Словарь, который по ключу "сложности" загрузит в words{} нужный уровень.
# # ---> ЭТО ВМЕСТО if \ elif \ else. <---
# logic = {
#     'easy': {**words, **words_easy},
#     'medium': {**words, **words_medium},
#     'hard': {**words, **words_hard},
# }
# # Не обязательная часть, от себя =)
# if input('Введите ready чтобы начать: ') != 'ready':
#     print('Увидимся в следующий раз !')
#
# else:
#     # .lower() переводить в нижний регистр ввод пользователя, для взаимодействия с ключом словаря logic
#     level = input('Выберите уровень сложности:\n1) - Easy\n2) - Medium\n3) - Hard\n: ').lower()
#     # возвращает по ключу словарь, который записывается в переменную
#     words = logic[level]
#     print('Выбран уровень сложности, мы предложим 5 слов, подберите перевод')
#
#     # Цикл по ключу \ значению
#     for key, value in words.items():
#         input('Нажмите Enter.')
#         # Переменная которая будет выводить слово, длинну букв и первую букву для подсказки.
#         # И сюда же "за двоеточие" пользователь вводит ответ.
#         guess_word = input(f'{key}, {len(value)}, букв, начинается на {value[0]}...: ')
#         # Соответственно, если ответ есть в словаре значений:
#         if guess_word in words.values():
#             # key.title() Переводит первую букву слова в верхний регистр
#             print(f'Верно. {key.title()} — это {value}', end='\n' * 2)
#             # Добавляем в словарь к ключу значение True если верный ответ
#             answers[key] = True
#         # Если нет:
#         else:
#             print(f'Неверно. {key.title()} — это {value}.', end='\n' * 2)
#             # Добавляем в словарь к ключу значение False если неверный ответ
#             answers[key] = False
#
#     # Тут я хочу сказать следующее: первоначальное моё решение было через два ПУСТЫХ списка,
#     # в которые я компоновал правильные и неправильные ответы через условия if \ else которые написаны
#     # выше. --- > пустой_лист.append(key) - как то так. Данное решение хоть и выводило результат корректно,
#     # но показалось немного неуместным в данном случае.
#
#     # Здесь у нас однострочный цикл заключенный в "[ список ]" для вывода результата по ключу / значению:
#     # очень просто, задаем вопрос if v ? Поскольку значения ключей это просто булевые выражения цикл
#     # покажет какие ключи обладают bool True, а какие bool False. "Подглядел в гугле".
#
#     # Ваш ранг: поскольку ключ словаря levels это цифра, просто в levels[] передаём длину списка
#     # с правильными ответами и тем самым получаем значение соответствующей цифры.
#     correct_answers = [k for (k, v) in answers.items() if v]
#     wrong_answers = [k for (k, v) in answers.items() if not v]
#     print(f'Правильно отвечены слова: {", ".join(correct_answers)}\n'
#           f'Неправильно отвечены слова: {", ".join(wrong_answers)}\n'
#           f'Ваш ранг: {levels[len(correct_answers)]}')
# ###################################################################################################


#####################################################################################################
# -------------------------------------------> МОЙ КУРСАЧ № 1<-------------------------------------- #
# Решение 1:

# import random
#
#
# # Главная функция с логикой программы.
# def main():
#     # Старт через enter. Если не enter программа завершается.
#     star = input('Сегодня мы потренируемся расшифровывать азбуку Морзе!\nНажмите Enter и начнем: ')
#     if star != '':
#         print('Увидимся в следующий раз !')
#     # Задаём вопрос пользователю сколько слов он будет отгадывать
#     else:
#         user_question = int(input('Сегодня мы потренируемся расшифровывать азбуку Морзе!\n'
#                                   'Сколько слов вы бы хотели отгадывать?\nВведите число, нажмите Enter и начнем: '))
#         # Переходим к функции get_word, записываем в неё цифру с инпута пользователя и запускаем цикл задавания
#         # случайных вопросов с помощью random.choice
#         get_word(user_question)
#         for question in range(1, user_question + 1):
#             random_word = random.choice(words)
#             print(f'Вопрос № {question}')
#             # После каждой итерации цикла функции get_word по случайному слову, будет осуществляться
#             # переход к функции morse_encode которая кодирует случайное слово и предлогает пользователю
#             # отгадать шифр
#             morse_encode(random_word)
#         # Функция, которая выводит статистику в конце тренировки
#         print(print_statistics(answers))
#
#
# # Функция получения случайного слова
# def get_word(user_question: int):
#     return user_question
#
#
# def morse_encode(random_word: str):
#     for morse_word in random_word:
#         print(morse[morse_word], end='')
#     user_input = input('\nВаш ответ: ')
#
#     # Если верно в пустой список записываем bool True
#     if user_input == random_word:
#         print(f'Верно, {random_word}!', end='\n' * 2)
#         answers.append(True)
#     # Если не верно, записываем bool False
#     else:
#         print(f'Неверно {random_word}!', end='\n' * 2)
#         answers.append(False)
#
#
# # Функция статистики по ответам пользователя
# def print_statistics(answers: list) -> str:
#     return f'Всего задачек: {len((answers))}\nОтвечено верно: {answers.count(True)}\n' \
#            f'Отвечено неверно: {answers.count(False)}'
#
#
# # Функция if __name__ == '__main__' - Отсюда начнётся работа программы из неё мы вызываем main()
# if __name__ == '__main__':
#     morse = {"0": "-----", "1": ".----", "2": "..---", "3": "...--", "4": "....-", "5": ".....", "6": "-....",
#              "7": "--...", "8": "---..", "9": "----.", "a": ".-", "b": "-...", "c": "-.-.", "d": "-..", "e": ".",
#              "f": "..-.", "g": "--.", "h": "....", "i": "..", "j": ".---", "k": "-.-", "l": ".-..", "m": "--",
#              "n": "-.", "o": "---", "p": ".--.", "q": "--.-", "r": ".-.", "s": "...", "t": "-", "u": "..-",
#              "v": "...-", "w": ".--", "x": "-..-", "y": "-.--", "z": "--..", ".": ".-.-.-", ",": "--..--",
#              "?": "..--..", "!": "-.-.--", "-": "-....-", "/": "-..-.", "@": ".--.-.", "(": "-.--.", ")": "-.--.-",
#              }
#     words = ['code', 'bit', 'list', 'alpha', 'omega', 'delta', 'gamma', 'neo', 'sharp']
#     answers = []
#     main()

# Решение 2:

# 1 - Импорт random
# 2 - Интерпретатор читает 1ю на пути функцию: def morse_encode(word: str): но ничего не выполняет в её теле
# 3 - Переходит ко 2й функции def get_word(words): ничего не выполняет в её теле, переходит дальше
# 4 - Переходит к 3й функции def print_statistics(answer): ничего не выполняет в её теле, переходит дальше
# 5 - Переходит к 4й функции def brain_training(number_of_questions): ничего не выполняет в её теле, переходит дальше
# 6 - Переходит к if __name__ == '__main__':
# 7 - В теле if __name__ == '__main__' интерпретатор начинает обходить список со словами, пустой список для добавления
#     ответов, словарь с кодировками и затем переходит к пользовательскому вводу, который является именем функции
#     get_word.
# 8 - Программа переходит к функции brain_training и начинает работу в теле функции: старт работы начинается
#     с цикла for, который отбирает вопросы в range от 1 до цифры введенной пользователем + 1 "+1 для того что бы
#     диапазон отбора был точным" например если будет просто 1, user "юзер ввел 3", вопросов будет 2, а не 3.
#     Переменная random_word - передаёт в функцию get_word список со словами.
# 9 - Дальше программа переходит к функции get_words куда был передан список и через оператор return возвращает
#     с помощью random.choice случайно слово из списка.
# 10 - Дальше возврат в тело функции brain_training и передача случайного слова в функцию morse_encode, которая
#      занимается зашифровкой случайного слова.
# 11 - Переход в тело функции morse_encode которая занимается зашифровкой случайного слова. Внутри данной функции
#      необходимо сделать переменную "аккумулятор" - в формате str "". Она будет принимать в себя кодированные буквы.
#      Начинается цикл for по случайному слову из списка, а затем условие if, которое говорит: ЕСЛИ переменная
#      "кодировщик" != "пробелу" то, мы добавляем в аккумулятор значение из словаря, соответствующее введенной букве.
#      Затем возвращается закодированное слово в интерпретатор python и переход в тело функции brain_training
#      в строку Ответа_Пользователя, куда будет вводиться догадка на зашифрованное слово. ЕСЛИ ответ пользователя
#      == выбранному случайному слову из списка, то: выводим соответствующее сообщение и добавляем в пустой список,
#      созданный в теле функции if __name__ == '__main__', значение bool - True, иначе: bool - False
# 12 - Дальше начинается повтор пунктов 8, 9, 10, 11 до тех пор, пока не будет заданно соответствующее, ранее
#      введенному пользователем цифровому количеству желаемых попыток.
# 13 - После того как все вопросы заданы, программа спускается в тело if __name__ == '__main__' и находит там -
#      print(print_statistics(answers)), это функция которая выводит статистику пользователя по тренажеру.
# 14 - В оператор return, функции print_statistics(answers) через f строку занесены данные, путём вытягивания их из
#      списка, в который складывались правильные и неправильные ответы. len(список) - общие ответы, count(True) -
#      подсчет верных ответов, count(False) - подсчет неверных ответов.

# # 1 - Импорт random
# import random
#
# def morse_encode(word: str):
#     encoded_word = ''
#     for decoder in word:
#         if decoder != '':
#             encoded_word += morse[decoder] + ' '
#     return encoded_word
#
#
# def get_word(words: list):
#     return random.choice(words)
#
#
# def print_statistics(answer: list):
#     return f'Всего задачек: {len((answers))}\nОтвечено верно: {answers.count(True)}\n' \
#            f'Отвечено неверно: {answers.count(False)}'
#
#
# def brain_training(number_of_questions: int):
#
#     for question in range(1, number_of_questions + 1):
#         print(f'Вопрос № {question}: ', end="")
#         random_word = get_word(words_list)
#         print((morse_encode(random_word)), end='')
#         usr_answer = input('\nВведите ответ: ').lower()
#
#         if usr_answer == random_word:
#             print(f'Верно ! {random_word}', end='\n' * 2)
#             answers.append(True)
#         else:
#             print(f'Неверно! {random_word}', end='\n' * 2)
#             answers.append(False)
#
#
# if __name__ == '__main__':
#     words_list = ['code', 'bit', 'list', 'alpha', 'omega', 'delta', 'gamma', 'neo']
#     answers = []
#     morse = {"0": "-----", "1": ".----", "2": "..---", "3": "...--", "4": "....-", "5": ".....", "6": "-....",
#              "7": "--...", "8": "---..", "9": "----.", "a": ".-", "b": "-...", "c": "-.-.", "d": "-..", "e": ".",
#              "f": "..-.", "g": "--.", "h": "....", "i": "..", "j": ".---", "k": "-.-", "l": ".-..", "m": "--",
#              "n": "-.", "o": "---", "p": ".--.", "q": "--.-", "r": ".-.", "s": "...", "t": "-", "u": "..-",
#              "v": "...-", "w": ".--", "x": "-..-", "y": "-.--", "z": "--..", ".": ".-.-.-", ",": "--..--",
#              "?": "..--..", "!": "-.-.--", "-": "-....-", "/": "-..-.", "@": ".--.-.", "(": "-.--.", ")": "-.--.-",
#              }
#     brain_training(int(input(f'Сегодня мы потренируемся расшифровывать азбуку Морзе!\n'
#                              f'Сколько слов вы бы хотели отгадывать?\n'
#                              f'Введите число, нажмите Enter и начнем: ')))
#     print(print_statistics(answers))
#####################################################################################################


#####################################################################################################

# import random
#
# morse = {"0": "-----", "1": ".----", "2": "..---", "3": "...--", "4": "....-", "5": ".....", "6": "-....",
#          "7": "--...", "8": "---..", "9": "----.", "a": ".-", "b": "-...", "c": "-.-.", "d": "-..", "e": ".",
#          "f": "..-.", "g": "--.", "h": "....", "i": "..", "j": ".---", "k": "-.-", "l": ".-..", "m": "--",
#          "n": "-.", "o": "---", "p": ".--.", "q": "--.-", "r": ".-.", "s": "...", "t": "-", "u": "..-",
#          "v": "...-", "w": ".--", "x": "-..-", "y": "-.--", "z": "--..", ".": ".-.-.-", ",": "--..--",
#          "?": "..--..", "!": "-.-.--", "-": "-....-", "/": "-..-.", "@": ".--.-.", "(": "-.--.", ")": "-.--.-",
#          }
# words = ['code', 'bit', 'list', 'alpha', 'omega', 'delta', 'gamma', 'neo', 'sharp']
# answers = []
#
#
# # Главная функция с логикой программы.
# def main():
#     # Старт через enter. Если не enter программа завершается.
#     star = input('Сегодня мы потренируемся расшифровывать азбуку Морзе!\nНажмите Enter и начнем: ')
#     if star != '':
#         print('Увидимся в следующий раз !')
#     # Задаём вопрос пользователю сколько слов он будет отгадывать
#     else:
#         user_question = int(input('Сегодня мы потренируемся расшифровывать азбуку Морзе!\n'
#                                   'Сколько слов вы бы хотели отгадывать?\nВведите число, нажмите Enter и начнем: '))
#         # Переходим к функции get_word, записываем в неё цифру с инпута пользователя и запускаем цикл задавания
#         # случайных вопросов с помощью random.choice
#         get_word(user_question)
#         for question in range(1, user_question + 1):
#             random_word = random.choice(words)
#             print(f'Вопрос № {question}')
#             # После каждой итерации цикла функции get_word по случайному слову, будет осуществляться
#             # переход к функции morse_encode которая кодирует случайное слово и предлогает пользователю
#             # отгадать шифр
#             morse_encode(random_word)
#         # Функция, которая выводит статистику в конце тренировки
#         return print_statistics(answers)
#
#
# # Функция получения случайного слова
# def get_word(user_question: int):
#     return user_question
#
#
# def morse_encode(random_word: str):
#
#     for morse_word in random_word:
#         print(morse[morse_word], end='')
#     user_input = input('\nВаш ответ: ')
#
#     # Если верно в пустой список записываем bool True
#     if user_input == random_word:
#         print(f'Верно, {random_word}!', end='\n' * 2)
#         answers.append(True)
#     # Если не верно, записываем bool False
#     else:
#         print(f'Неверно {random_word}!', end='\n' * 2)
#         answers.append(False)
#
#
# # Функция статистики по ответам пользователя
# def print_statistics(answers: list) -> str:
#     return f'Всего задачек: {len((answers))}\nОтвечено верно: {answers.count(True)}\n' \
#            f'Отвечено неверно: {answers.count(False)}'
#
#
# print(main())


